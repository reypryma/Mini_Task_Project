// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:webmiss/model/forecast_weather_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(ForecastWeatherEntity).toString(): ForecastWeatherEntity.fromJson,
		(ForecastWeatherList).toString(): ForecastWeatherList.fromJson,
		(ForecastWeatherListMain).toString(): ForecastWeatherListMain.fromJson,
		(ForecastWeatherListWeather).toString(): ForecastWeatherListWeather.fromJson,
		(ForecastWeatherListClouds).toString(): ForecastWeatherListClouds.fromJson,
		(ForecastWeatherListWind).toString(): ForecastWeatherListWind.fromJson,
		(ForecastWeatherListRain).toString(): ForecastWeatherListRain.fromJson,
		(ForecastWeatherListSys).toString(): ForecastWeatherListSys.fromJson,
		(ForecastWeatherCity).toString(): ForecastWeatherCity.fromJson,
		(ForecastWeatherCityCoord).toString(): ForecastWeatherCityCoord.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<ForecastWeatherEntity>[] is M){
			return data.map<ForecastWeatherEntity>((Map<String, dynamic> e) => ForecastWeatherEntity.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherList>[] is M){
			return data.map<ForecastWeatherList>((Map<String, dynamic> e) => ForecastWeatherList.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherListMain>[] is M){
			return data.map<ForecastWeatherListMain>((Map<String, dynamic> e) => ForecastWeatherListMain.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherListWeather>[] is M){
			return data.map<ForecastWeatherListWeather>((Map<String, dynamic> e) => ForecastWeatherListWeather.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherListClouds>[] is M){
			return data.map<ForecastWeatherListClouds>((Map<String, dynamic> e) => ForecastWeatherListClouds.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherListWind>[] is M){
			return data.map<ForecastWeatherListWind>((Map<String, dynamic> e) => ForecastWeatherListWind.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherListRain>[] is M){
			return data.map<ForecastWeatherListRain>((Map<String, dynamic> e) => ForecastWeatherListRain.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherListSys>[] is M){
			return data.map<ForecastWeatherListSys>((Map<String, dynamic> e) => ForecastWeatherListSys.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherCity>[] is M){
			return data.map<ForecastWeatherCity>((Map<String, dynamic> e) => ForecastWeatherCity.fromJson(e)).toList() as M;
		}
		if(<ForecastWeatherCityCoord>[] is M){
			return data.map<ForecastWeatherCityCoord>((Map<String, dynamic> e) => ForecastWeatherCityCoord.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}